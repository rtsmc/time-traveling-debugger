#!/usr/bin/env python3
"""
Trace File Parser

This is a simple example parser for the trace files generated by cdebugger.
Use this as a starting point for your CLI implementation.
"""

class TraceEntry:
    """Represents a single line in the trace file"""
    
    def __init__(self, exec_order, filename, lineno, code, variables):
        self.exec_order = int(exec_order)
        self.filename = filename
        self.lineno = int(lineno)
        self.code = code
        self.variables = self.parse_variables(variables)
    
    def parse_variables(self, var_string):
        """Parse the variable string into a dictionary"""
        if not var_string:
            return {}
        
        variables = {}
        pairs = var_string.split(';')
        
        for pair in pairs:
            if '=' in pair:
                name, value = pair.split('=', 1)
                variables[name] = value
        
        return variables
    
    def __repr__(self):
        return f"TraceEntry(order={self.exec_order}, {self.filename}:{self.lineno})"
    
    def __str__(self):
        vars_str = ', '.join(f"{k}={v}" for k, v in self.variables.items())
        return f"[{self.exec_order}] {self.filename}:{self.lineno} | {self.code} | {{{vars_str}}}"


class TraceParser:
    """Parser for trace files"""
    
    def __init__(self, trace_file):
        self.trace_file = trace_file
        self.entries = []
        self.load()
    
    def load(self):
        """Load and parse the trace file"""
        with open(self.trace_file, 'r') as f:
            # Skip header
            header = f.readline()
            
            for line in f:
                line = line.strip()
                if not line:
                    continue
                
                parts = line.split('|||')
                if len(parts) >= 5:
                    entry = TraceEntry(
                        exec_order=parts[0],
                        filename=parts[1],
                        lineno=parts[2],
                        code=parts[3],
                        variables=parts[4] if len(parts) > 4 else ""
                    )
                    self.entries.append(entry)
    
    def get_entry(self, index):
        """Get entry by execution order"""
        if 0 <= index < len(self.entries):
            return self.entries[index]
        return None
    
    def find_by_line(self, filename, lineno):
        """Find all entries for a specific file:line"""
        return [e for e in self.entries 
                if e.filename.endswith(filename) and e.lineno == lineno]
    
    def get_variable_history(self, var_name):
        """Get the history of a variable's values"""
        history = []
        for entry in self.entries:
            if var_name in entry.variables:
                history.append((entry.exec_order, entry.variables[var_name]))
        return history
    
    def get_execution_path(self):
        """Get the path of execution (file:line pairs)"""
        return [(e.filename, e.lineno) for e in self.entries]
    
    def print_summary(self):
        """Print a summary of the trace"""
        print(f"Trace File: {self.trace_file}")
        print(f"Total Entries: {len(self.entries)}")
        
        if self.entries:
            print(f"First Entry: {self.entries[0]}")
            print(f"Last Entry: {self.entries[-1]}")
            
            # Count unique files
            files = set(e.filename for e in self.entries)
            print(f"Files Traced: {len(files)}")
            for f in files:
                count = sum(1 for e in self.entries if e.filename == f)
                print(f"  - {f}: {count} lines")


def main():
    """Example usage"""
    import sys
    
    if len(sys.argv) < 2:
        print("Usage: python parse_trace.py <trace_file>")
        print("\nThis is an example parser for trace files.")
        print("Use it as a starting point for your CLI implementation.")
        sys.exit(1)
    
    trace_file = sys.argv[1]
    
    try:
        parser = TraceParser(trace_file)
        parser.print_summary()
        
        print("\n" + "="*60)
        print("First 10 entries:")
        print("="*60)
        
        for i in range(min(10, len(parser.entries))):
            print(parser.entries[i])
        
        # Example: Find variable history
        if parser.entries:
            # Get all variable names from first entry
            first_vars = parser.entries[0].variables.keys()
            if first_vars:
                var_name = list(first_vars)[0]
                history = parser.get_variable_history(var_name)
                
                print(f"\n" + "="*60)
                print(f"History of variable '{var_name}':")
                print("="*60)
                
                for order, value in history[:10]:  # First 10 changes
                    print(f"  [{order}] {var_name} = {value}")
        
    except FileNotFoundError:
        print(f"Error: Trace file '{trace_file}' not found")
        sys.exit(1)
    except Exception as e:
        print(f"Error parsing trace file: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()
